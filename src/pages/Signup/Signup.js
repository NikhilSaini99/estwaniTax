import React, { useEffect, useState } from 'react'
import { useSelector, useDispatch } from 'react-redux'
import { useForm, Controller } from 'react-hook-form'
import { signupData } from '@/features/SignupSlice'
import { Box, Typography } from '@mui/material'
import Head from 'next/head'
import CustomTextField from '@/components/CustomTextField'
import { bgImgStyling } from '../Login/LoginForm'
import CustomButton from '@/components/Button'
import Navbar from '@/components/Navbar'
import { useFetch } from '@/constants/useFetch'
import omit from 'lodash/omit';




const Signup = () => {
    const [passwordError, setPasswordError] = useState(false);
    const { data: registerData, error, errorMessage, fetchAPI } = useFetch('post', '/user/ragister')

    const [errorSet, setError] = useState(false);
    const dispatch = useDispatch()
    const signUpFormValue = useSelector((state) => state.SignupForm);

    const { control, handleSubmit, watch, reset, formState: { errors } } = useForm({
        defaultValues: {
            name_of_business: '',
            address: '',
            tin: '',
            first_name: '',
            last_name: 'Test',
            designation: '',
            telephone_number: '',
            cell_phone_number: '',
            email_id: '',
            password: '',
            rePassword: '',
            user_type: 2
        }
    })

    const password = watch('password');
    const rePassword = watch('rePassword');

    const onsubmit = async (data) => {
        try{
            if (password !== rePassword) {
                // alert("Passwords do not match. Please try again.")
                setPasswordError(true);
                return
            }
            setPasswordError(false);
            //removing repassword field and making a new copy without it usingLodash lib
    
            const newData = omit(data, 'rePassword');
            dispatch(signupData(newData)); //Dispatching data to store 
    
            fetchAPI(newData)

        }catch(error){
            console.log(error)
            const err = new Error("User e-mail already Exist")
            alert(err)
        }
        reset()
    }

    useEffect(() => {
        if (error) {
            alert(errorMessage)
            return
        }
    }, [errorMessage, error]);

    const formParentStyling = {
        width: { xs: '98%', lg: '50%' },
        margin: '0 auto',
        p: { xs: '0.5rem', lg: '2rem' },
        borderRadius: '20px',
        position: 'relative',
        top: '0',
        minHeight: { xs: '100vh', lg: '800px' }
    }
    return (
        <>
            <Head>
                <title>Eswatini Environment Authority</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.png" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <Navbar />
            {/* <Box sx={{ ...bgImgStyling }}>
            </Box> */}

            <Box sx={{ ...formParentStyling }}>
                <Box className='grid grid-cols-2 gap-4 bg-white shadow-2xl p-4 rounded-xl absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full sm:w-3/4 lg:w-full md:p-32 lg:p-24'
                    component='form' onSubmit={handleSubmit(onsubmit)}>
                    <Typography className='col-span-full' variant='h1' sx={{ marginBottom: "2rem", fontSize: { xs: '1.5rem', md: '2rem', lg: '3rem' }, color: '#2C306F' }}>
                        Sign Up Now!!
                    </Typography>
                    <Controller
                        control={control}
                        name='name_of_business'
                        rules={{ required: 'BusinessName is required' }}
                        render={({ field }) =>
                            <CustomTextField
                                inputType='text' fieldLabel='Enter BusinessName' field={field} errorDetail='name_of_business'
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='address'
                        rules={{ required: 'Address is required' }}
                        render={({ field }) =>
                            <CustomTextField
                                inputType='text' fieldLabel='Enter Address' field={field} errorDetail='address'
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='tin'
                        rules={{ required: 'Tin is required' }}
                        render={({ field }) =>
                            <CustomTextField
                                inputType='number' fieldLabel='Enter Tin' field={field} errorDetail='tin'
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='first_name'
                        rules={{ required: 'PrimaryContact is required' }}
                        render={({ field }) =>
                            <CustomTextField
                                inputType='text' fieldLabel='Enter Full Name' field={field} errorDetail='first_name'
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='designation'
                        rules={{ required: 'Designation is required' }}
                        render={({ field }) =>
                            <CustomTextField
                                inputType='text' fieldLabel='Enter Designation' field={field} errorDetail='designation'
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='telephone_number'
                        rules={{ required: 'TeleNo is required' }}
                        render={({ field }) =>
                            <CustomTextField
                                inputType='number' fieldLabel='Enter Telephone Number' field={field} errorDetail='telephone_number'
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='cell_phone_number'
                        rules={{ required: 'CellNo is required' }}
                        render={({ field }) =>
                            <CustomTextField
                                inputType='number' fieldLabel='Enter Celephone Number' field={field} errorDetail='cell_phone_number'
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='email_id'
                        rules={{ required: 'Email is required' }}
                        render={({ field }) =>
                            <CustomTextField
                                inputType='email' fieldLabel='Enter Email' field={field} errorDetail='email_id'
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='password'
                        rules={{ required: 'Password is required' }}
                        render={({ field }) =>
                            <CustomTextField
                                inputType='password' fieldLabel='Enter Password' field={field} errorDetail='password'
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='rePassword'
                        rules={{ required: 'Password is required' }}
                        render={({ field }) =>
                        (
                            <>
                                <CustomTextField
                                    name="repassword"
                                    inputType='password' fieldLabel='Re-Type-Password' field={field} errorDetail='rePassword'
                                    errors={errors}
                                />
                                {passwordError && <label style={{ color: 'red' }}
                                >Passwords do not match. Please try again.</label>}
                            </>
                        )
                        }
                    >
                    </Controller>
                    <Box className="col-span-full flex justify-center mt-6">
                        <CustomButton type='submit' text='Register' bgColor='#2C306F'/>
                    </Box>
                </Box>
            </Box>
        </>

    )
}   

export default Signup
